// Code proto-vulnerabilities are loaded from a file into this relation.
// Or a new file is created depending on the definition of the preprocessor flag.
// The analysis inserts more rows
// The relation is rewritten to the file

#define FACT_INPUT(_filename) \
STR(_filename\
.facts)

#define CSV_INPUT(_filename) \
STR(_filename\
.csv)

#define STR(x) #x

#ifndef MULTI_CONTRACT
#define INPUT_RELATION(_relname)\
.input _relname(IO="file", filename = CSV_INPUT(_relname), delimiter="\t")
#else
#define INPUT_RELATION(_relname)\
.input _relname()
#endif

#ifndef FIRST_CLIENT_ANALYSIS
INPUT_RELATION(ProtoVulnerability)
INPUT_RELATION(Vulnerability)
#endif

.decl ProtoVulnerability(
    selector: symbol,
    proto_vulnerability_type: symbol,
    statement: OriginalStatement,
    storage_location: symbol,
    json_detail: symbol
)


.decl Vulnerability(
    vulnerability_type: symbol,
    confidence: symbol,
    visibility: symbol,
    key_statement: OriginalStatement,
    key_selector: symbol,
    debug_template: symbol,
    debug_arg0: symbol,
    debug_arg1: symbol,
    debug_arg2: symbol,
    debug_arg3: symbol
)

#define NULL "null"


.decl VulnerabilitySimple(vulnerability_type: symbol, template: symbol, statement: Statement)
VulnerabilitySimple(a, b, c) :- VulnerabilitySimple(a, b, c).                   

Vulnerability(
  vulnerability_type, "MEDIUM",
#ifdef DEFAULT_VISIBILITY
  DEFAULT_VISIBILITY,
#else
  "PUBLIC",
#endif
  original_statement, NULL, template,
  NULL, NULL, NULL, NULL) :-
   VulnerabilitySimple(vulnerability_type, template, statement),
   Statement_OriginalStatement(statement, original_statement).

   

.output ProtoVulnerability
.output Vulnerability

#define PREPARE_JSON1(arg1) cat("{ ", cat(arg1, " }"))
#define PREPARE_JSON2(arg1, arg2) cat("{ ", cat(cat(arg1, ", "), cat(arg2, " }")))
#define PREPARE_JSON3(arg1, arg2, arg3) cat("{ ", cat(cat(cat(arg1, ", "), cat(arg2, ", ")), cat(arg3, " }")))
#define PREPARE_JSON4(arg1, arg2, arg3, arg4) cat("{ ", cat(  cat(cat(arg1, ", "), cat(arg2, ", ")), cat(cat(arg3, ", "), cat(arg4, " }"))))
#define QUOTE substr("\"", 0, 1)   // I could find no other way to get an escaped quote!
#define STRINGIZE(arg) cat(QUOTE, cat(arg, QUOTE))
#define JSON_ELEMENT(name, value) cat(cat(STRINGIZE(name), " : "), value)
#define JSON_LEAF(name, value) cat(cat(STRINGIZE(name), " : "), STRINGIZE(value))
#define SIGNATURE(pubSig) JSON_LEAF("callerSig", pubSig)
#define CALLEE(pubSig, pubSigHash) JSON_ELEMENT("callee", PREPARE_JSON2(JSON_LEAF("sig", pubSig), JSON_LEAF("sigHash", pubSigHash)))
#define CALL_ARG(pubSig, pubSigHash, arg) PREPARE_JSON2(CALLEE(pubSig,pubSigHash), JSON_LEAF("argPos", to_string(arg)))
